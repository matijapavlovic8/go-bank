basePath: /
definitions:
  api.Error:
    properties:
      error:
        type: string
    type: object
  types.Account:
    properties:
      accountNumber:
        type: integer
      balance:
        type: number
      created:
        type: string
      ownerID:
        type: integer
    type: object
  types.LoginResponse:
    properties:
      id:
        type: integer
      token:
        type: string
    type: object
  types.Role:
    enum:
    - admin
    - user
    type: string
    x-enum-varnames:
    - AdminRole
    - UserRole
  types.User:
    properties:
      ID:
        type: integer
      encryptedPassword:
        type: string
      lastName:
        type: string
      memberSince:
        type: string
      name:
        type: string
      role:
        $ref: '#/definitions/types.Role'
    type: object
  types.UserDto:
    properties:
      ID:
        type: integer
      lastName:
        type: string
      memberSince:
        type: string
      name:
        type: string
      role:
        $ref: '#/definitions/types.Role'
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample service for managing bank users and accounts
  title: Bank API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: Fetch an account by account number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Get All Accounts
      tags:
      - account
    post:
      consumes:
      - application/json
      description: Create an account for user with given ID
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Create an Account
      tags:
      - account
  /accounts/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an account by account number
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete Account
      tags:
      - account
    get:
      consumes:
      - application/json
      description: Fetch an account by account number
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Get Account
      tags:
      - account
    patch:
      consumes:
      - application/json
      description: Update an account's balance by account number
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: integer
      - description: New Balance
        in: query
        name: newBalance
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Update Account
      tags:
      - account
  /login:
    post:
      consumes:
      - application/json
      description: Used to log in a user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      - description: User password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
      summary: Login
      tags:
      - users
  /users:
    post:
      consumes:
      - application/json
      description: Creates a new user
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      - description: User password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
      summary: Create user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a user by their ID, and deletes all the users accounts
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.Account'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.Error'
      security:
      - ApiKeyAuth: []
      summary: Delete User by ID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Fetch a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserDto'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get User by ID
      tags:
      - users
  /users/{id}/accounts:
    get:
      consumes:
      - application/json
      description: Fetch all accounts for a user by their ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Account'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Error'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Error'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/api.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Error'
      summary: Get All User Accounts
      tags:
      - account
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: x-jwt-token
    type: apiKey
swagger: "2.0"
